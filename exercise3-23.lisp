; node = ( data . ( back . forward ) )

(define (make-node data prev next)
  (cons data (cons prev next)))
(define (set-node-prev! n prev)
  (set-car! (cdr n) prev))
(define (set-node-next! n next)
  (set-cdr! (cdr n) next))
(define (node-data n)
  (car n))
(define (node-prev n)
  (cadr n))
(define (node-next n)
  (cddr n))

(define (front-ptr d) (car d))
(define (rear-ptr d) (cdr d))
(define (set-front-ptr! d item) (set-car! d item))
(define (set-rear-ptr! d item) (set-cdr! d item))
(define (make-deque) (cons '() '()))
(define (empty-deque? d) (null? (front-ptr d)))
(define (front-deque d)
  (if (null? (front-ptr d))
    '()
    (node-data (front-ptr d))))
(define (rear-deque d)
  (if (null? (rear-ptr d))
    '()
    (node-data (rear-ptr d))))
(define (print-deque d)
  (define (print-deque-helper n)
    (if (null? n)
      '()
      (cons (node-data n) (print-deque-helper (node-next n)))))
  (print-deque-helper (front-ptr d)))
(define (front-insert-deque! d item)
  (cond ((empty-deque? d)
         (let ((new-pair (make-node item '() '())))
           (set-front-ptr! d new-pair)
           (set-rear-ptr! d new-pair)))
        (else
         (set-front-ptr! d (make-node item '() (front-ptr d)))))
  (print-deque d))
(define (rear-insert-deque! d item)
  (cond ((empty-deque? d)
         (let ((new-pair (make-node item '() '())))
           (set-front-ptr! d new-pair)
           (set-rear-ptr! d new-pair)))
        (else
          (let ((new-pair (make-node item (rear-ptr d) '())))
            (set-node-next! (rear-ptr d) new-pair)
            (set-rear-ptr! d new-pair))))
  (print-deque d))
(define (front-delete-deque! d)
  (cond ((empty-deque? d)
         (error "FRONT-DELETE! called with an empty deque" d))
        ((eq? (front-ptr d) (rear-ptr d))
         (set-front-ptr! d '())
         (set-rear-ptr! d '()))
        (else
          (set-front-ptr! d (node-next (front-ptr d)))
          (set-node-prev! (front-ptr d) '())))
  (print-deque d))
(define (rear-delete-deque! d)
  (cond ((empty-deque? d)
         (error "REAR-DELETE! called with an empty deque" d))
        ((eq? (front-ptr d) (rear-ptr d))
         (set-front-ptr! d '())
         (set-rear-ptr! d '()))
        (else
          (set-rear-ptr! d (node-prev (rear-ptr d)))
          (set-node-next! (rear-ptr d) '())))
  (print-deque d))

(define d (make-deque))
(front-insert-deque! d 'b)
(front-insert-deque! d 'a)
(rear-insert-deque! d 'c)
(rear-insert-deque! d 'd)
(empty-deque? d)
(front-deque d)
(rear-deque d)
(front-delete-deque! d)
(rear-delete-deque! d)
(front-delete-deque! d)
(rear-delete-deque! d)
(empty-deque? d)
(front-deque d)
(rear-deque d)
