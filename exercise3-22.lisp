(define (front-ptr queue) (queue 'front-ptr))
(define (rear-ptr queue) (queue 'rear-ptr))
(define (set-front-ptr! queue item) ((queue 'set-front-ptr!) item))
(define (set-rear-ptr! queue item) ((queue 'set-rear-ptr!) item))
(define (empty-queue? queue) (queue 'empty-queue?))
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-front-ptr!) (lambda (item) (set! front-ptr item)))
            ((eq? m 'set-rear-ptr!) (lambda (item) (set! rear-ptr item)))
            ((eq? m 'empty-queue?) (null? front-ptr))
            ((eq? m 'front-queue) (if (null? front-ptr)
                                    (error "FRONT called with empty queue")
                                    (car front-ptr)))
            ((eq? m 'insert-queue!) (lambda (item) 
                                      (let ((new-pair (cons item '())))
                                        (cond ((null? front-ptr) (set! front-ptr new-pair) (set! rear-ptr new-pair))
                                              (else (set-cdr! rear-ptr new-pair) (set! rear-ptr new-pair))))
                                      front-ptr))
            ((eq? m 'delete-queue!) (cond ((null? front-ptr) (error "DELETE! called with an empty queue"))
                                          (else (set! front-ptr (cdr front-ptr))))
                                    front-ptr)
            (else (error "DISPATCH called with invalid argument" m))))
    dispatch))
(define (front-queue queue) (queue 'front-queue))
(define (insert-queue! queue item) ((queue 'insert-queue!) item))
(define (delete-queue! queue) (queue 'delete-queue!))
(define q1 (make-queue))
(insert-queue! q1 'a)
(insert-queue! q1 'b)
(empty-queue? q1)
(front-queue q1)
(delete-queue! q1)
(delete-queue! q1)
(empty-queue? q1)
(set-front-ptr! q1 'c)
(set-rear-ptr! q1 'd)
(front-ptr q1)
(rear-ptr q1)
