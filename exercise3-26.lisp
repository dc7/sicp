(define (make-tree key value left right) (list key value left right))
(define (node-key node) (first node))
(define (node-value node) (second node))
(define (node-set-value! node value) (set-cdr! node (cons value (cddr node))) 'ok)
(define (node-set-left! node left) (set-cdr! (cdr node) (cons left (cdddr node))) 'ok)
(define (node-set-right! node right) (set-cdr! (cddr node) (cons right '())) 'ok)
(define (node-left node) (third node))
(define (node-right node) (fourth node))
(define (tree-find tree key)
  (cond ((null? tree) #f)
        ((eq? key (node-key tree)) (node-value tree))
        ((< key (node-key tree)) (tree-find (node-left tree) key))
        ((> key (node-key tree)) (tree-find (node-right tree) key))
        (else (error ("tree-find" tree key)))))
(define (tree-insert! tree key value)
  (cond ((null? tree)
         (set! tree (make-tree key value '() '())))
        ((eq? key (node-key tree))
         (node-set-value! tree value))
        ((and (< key (node-key tree)) (null? (node-left tree)))
         (node-set-left! tree (make-tree key value '() '())))
        ((and (< key (node-key tree)) (not (null? (node-left tree))))
         (tree-insert! (node-left tree) key value))
        ((and (> key (node-key tree)) (null? (node-right tree)))
         (node-set-right! tree (make-tree key value '() '())))
        ((and (> key (node-key tree)) (not (null? (node-right tree))))
         (tree-insert! (node-right tree) key value))
        (else (error "ERROR in tree-insert!" tree key value)))
  'ok)

(define tree (make-tree 3 'b (make-tree 2 'a '() '()) (make-tree 4 'c '() '())))
(tree-find tree 1)
(tree-find tree 2)
(tree-find tree 3)
(tree-find tree 4)
(tree-find tree 5)
(tree-insert! tree 1 'v)
(tree-insert! tree 2 'w)
(tree-insert! tree 3 'x)
(tree-insert! tree 4 'y)
(tree-insert! tree 5 'z)
(tree-find tree 1)
(tree-find tree 2)
(tree-find tree 3)
(tree-find tree 4)
(tree-find tree 5)
