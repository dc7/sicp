(define element-of-set? memq)
(define adjoin-set cons)
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
(define union-set append)

(element-of-set? 3 '(1 2 3 4 5))
(adjoin-set 3 '(1 2 3 4 5))
(intersection-set '(1 2 3 4 5) '(2 3 4 5 6 7))
(union-set '(1 2 3 4 5) '(2 3 4 5 6 7))
