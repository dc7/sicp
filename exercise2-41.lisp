(define (enumerate-interval low high)
  (if (> low high)
    '()
    (cons low (enumerate-interval (+ low 1) high))))
(define (flatmap proc seq)
  (foldr append '() (map proc seq)))

;(define (unique-pairs n)
;  (flatmap (lambda (i)
;         (map (lambda (j) (list j i))
;              (enumerate-interval 1 (- i 1))))
;       (enumerate-interval 2 n)))

(define (sum-ordered-triples n s)
  (filter (lambda (triple) (= s (foldr + 0 triple)))
          (flatmap (lambda (i)
                     (flatmap (lambda (j)
                            (map (lambda (k) (list i j k))
                                 (enumerate-interval 1 n))
                            )
                          (enumerate-interval 1 n)))
                   (enumerate-interval 1 n))))

(display (sum-ordered-triples 10 5))
(newline)
